<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function snowExamLoaderController($rootScope, $scope, $sce, glideUserSession, spModal) {
    /* widget controller */
    var c = this;
    var g_form = $scope.page.g_form;
    c.isBegun = false;
    c.isTicketPage = false;

    //Show Exam
    c.showTest = function() {
        c.isBegun = !c.isBegun;
    };

    //enter password
    c.onPrompt = function() {
        if ($scope.data.password == null || $scope.data.password == '') {
            c.showTest();
        } else {
            spModal.prompt("Test Code, Please", c.name).then(function(name) {
                c.name = name;

                if (c.name == $scope.data.password) {
                    spModal.alert('Your exam will last in ' + $scope.data.duration + ' minutes. Are you ready?').then(function(answer) {
                        c.simple = answer;
                        if (answer == true) {
                            c.showTest();
                        }
                    });

                } else {
                    spModal.alert('Incorrect Code, try again or reach out to ADMIN').then(function(answer) {
                        c.simple = answer;
                        if (answer == true) {
                            c.onPrompt();
                        }
                    });
                }

            });
        }
    }

    // On Load Ticket Page
    $scope.checkCorrectAnswer = function(key, question) {
        var correctAnswers = question.correctAnswers.toLowerCase();
        var keyAnswer = key.label.toLowerCase();
        var found = false;

        //found = new RegExp("\\b"+key.label.toLowerCase()+"\\b").test(correctAnswers);
        found = correctAnswers.includes(keyAnswer);
        if (correctAnswers.split(',').length == 1) {
            found = correctAnswers.indexOf(keyAnswer) == 0 ? true : false;
        }

        if (found) {
            return "fa fa-check";
        } else {
            return "fa fa-times";
        }

    }

    // On Change
    $scope.selectKey = function(event, keySelected, question) {
        if (c.isTicketPage == true) {
            g_form.addErrorMessage('You are not allow to edit');
            return;
        }

        var isSelected = !$(event.currentTarget).hasClass('element-selected');
        if (isSelected) {
            question.answerSelected.push(keySelected);
            keySelected.isSected = 'selected';
        } else {
            for (var i = 0; i < question.answerSelected.length; i++) {
                if (question.answerSelected[i].label == keySelected.label) {
                    question.answerSelected.splice(i, 1);
                }
            }
            keySelected.isSected = 'unSelected';
        }

        // Set value to dataload field
        var field = 'dataload';
        var dataStr = JSON.stringify(c.data.items)
        g_form.setValue(field, dataStr);
        // save session
        localStorage.setItem("item", $scope.data.catItem);
        localStorage.setItem("examData", dataStr);
        localStorage.setItem("duration", localStorage.getItem("distance"));

    };

    // Loading Question and check selected
    $scope.checkSelected = function(key, question) {
        for (var i = 0; i < question.answerSelected.length; i++) {
            if (question.answerSelected[i].label == key.label) {
                return 'selected';
            } else {
                return '';
            }
        }
    };

    // On New Cate Item Page Load
    if ($scope.data.page == 'sc_cat_item') {
        // Check local Session
        if (localStorage.getItem("item") && localStorage.getItem("item") == $scope.data.catItem) {
            // Set value to dataload field
            var field = 'dataload';
            var dataStr = JSON.stringify(c.data.items)
            g_form.setValue(field, dataStr);
            c.data.items = JSON.parse(localStorage.getItem("examData"));
        } else {
            c.data.items = $scope.data.items;
        }

        for (var k in c.data.items) {
            c.data.items[k].answerSelected = [];
            for (var j in k.keys) {
                k.keys[j].isSected = 'unSelected';
            }
        }

        if (!localStorage.getItem("item")) {
            c.data.items = shuffle(c.data.items);
        }

    }

    // On TicketPage
    if ($scope.data.page == 'ticket') {
        c.data.items = $scope.data.items;
        c.isBegun = true;
        c.isTicketPage = true;
    }


    function shuffle(sourceArray) {
        for (var i = 0; i < sourceArray.length - 1; i++) {
            var j = i + Math.floor(Math.random() * (sourceArray.length - i));

            var temp = sourceArray[j];
            sourceArray[j] = sourceArray[i];
            sourceArray[i] = temp;
        }
        return sourceArray;
    }

    //Pagination
    c.indexStart = 0;
    c.range = $scope.data.limit;
    c.indexEnd = c.range - 1;
    c.currentPage = 1;

    $scope.goToPage = function(page) {
        var pre = c.currentPage;
        c.currentPage = page;
        if (page == 'end')
            c.currentPage = $scope.data.pages.length;
        $scope.data.temp = c.currentPage;
        c.indexStart = (c.indexStart + c.range * (c.currentPage - pre));
        c.indexEnd = (c.indexEnd + c.range * (c.currentPage - pre));

    };

    $scope.goNextPage = function(page) {
        c.number = $scope.data.temp;
        c.currentPage = page;

        if ((c.number != $scope.data.pages.length) && (page == 'next')) {
            if (c.number == 0) {
                c.number = 1;
            }
            c.indexStart = c.number;
            c.indexEnd = c.number;
            c.number = c.number + 1;
            $scope.data.temp = c.number;
            c.currentPage = c.number;
			document.getElementById("btn-button btn1").disabled = false;

        } else if ((c.number == $scope.data.pages.length) && (page == 'next')) {
// 			document.getElementById("btn-button btn2").disabled = true;
            c.indexStart = 0;
            c.indexEnd = 0;
            c.number = 1;
            $scope.data.temp = c.number;
            c.currentPage = c.number;
        }
    };

    $scope.goPreviousPage = function(page) {		
        c.number = $scope.data.temp;
        c.currentPage = page;
		
        if ((c.number == 1) && (c.indexStart < 1) && (c.indexEnd < 1) && (page == 'previous')) {
            c.indexStart = $scope.data.pages.length - 1;
            c.indexEnd = $scope.data.pages.length - 1;
            c.number = $scope.data.pages.length;
            $scope.data.temp = c.number;
            c.currentPage = c.number;

        } else if ((c.number > 0) && (c.indexStart != -1) && (c.indexEnd != -1) && (page == 'previous')) {
            c.number = c.number - 1;
            c.indexStart = c.number - 1;
            c.indexEnd = c.number - 1;
            $scope.data.temp = c.number;
            c.currentPage = c.number;
        }
    };
}]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Btn and Timer */&#13;
.center {&#13;
	color: white;&#13;
  margin: auto;&#13;
  width: fit-content;&#13;
  padding: 10px 40px;&#13;
  background-color: #1f8476;&#13;
  border-color: #1f8476;&#13;
  border-radius: 5px;&#13;
}&#13;
&#13;
/* Test Body */&#13;
&#13;
&#13;
.test-body {&#13;
  padding: 0px 0px 10px 0px;&#13;
  background: repeating-linear-gradient(#F1EDE9, #F1EDE9 31px, #94ACD4 31px, #94ACD4 32px); &#13;
}&#13;
&#13;
&#13;
.test-question {&#13;
  margin: 4% 6%;&#13;
  font-family: roboto-regular;&#13;
  font-size: 20px;&#13;
  font-weight: 500;&#13;
}&#13;
&#13;
.test-options {&#13;
	font-size: 18px;&#13;
}&#13;
&#13;
.test-answer-wrapper ul li {&#13;
  text-align: center;&#13;
  list-style: none;&#13;
  background-color: #87c52e;&#13;
  color: #fff;&#13;
  border: 1px solid #87c52e;&#13;
  border-radius: 15px;&#13;
  padding: 10px;&#13;
  margin: 8px 5px;&#13;
  box-shadow: 0 9px #999;&#13;
}&#13;
&#13;
.test-answer-wrapper {&#13;
  padding: 0 30px 0 0;&#13;
}&#13;
&#13;
.col-float-left {&#13;
	float: left;&#13;
}&#13;
&#13;
.element-selected {&#13;
	background-color: #ff5722 !important;&#13;
  box-shadow: 0 5px #666 !important;&#13;
  transform: translateY(4px);&#13;
}&#13;
.element-unSelected {&#13;
	background-color: #87c52e !important;&#13;
  box-shadow: 0 9px #999 !important;&#13;
}&#13;
&#13;
&#13;
/* Pagination */&#13;
.pagination a {&#13;
  color: black;&#13;
  float: left;&#13;
  padding: 8px 16px;&#13;
  text-decoration: none;&#13;
}&#13;
&#13;
.pagination a.active {&#13;
  background-color: #607d8b;&#13;
  color: white;&#13;
  border-radius: 5px;&#13;
}&#13;
&#13;
.pagination a:hover:not(.active) {&#13;
  background-color: #ddd;&#13;
  border-radius: 5px;&#13;
}&#13;
&#13;
/* Button */&#13;
#btn-button{&#13;
  background-color: #007FC1;&#13;
  color: #fff;&#13;
  min-width: 10rem;&#13;
  min-height: 3.4rem;&#13;
  font-size: 1.4rem !important;&#13;
  font-weight: 600;&#13;
  border: 0.1rem solid transparent !important;&#13;
  border-radius: 0.4rem !important;&#13;
  padding: 0 2rem !important;&#13;
  margin: 10px;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>exams</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Snow Exam Loader</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function(){
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */


	data.isAdmin = gs.hasRole('admin');	
	data.items = [];
	data.password = '';
	data.catItem = $sp.getParameter('sys_id');
	var util = new SnowPortalUtils(data.catItem);
	data.table = $sp.getParameter('table');
	data.page = $sp.getParameter('id');
	
	var rec = new GlideRecord('sc_cat_item_producer');
	if (rec.get(data.catItem)) {
		data.password = rec.getValue('u_password');
		data.duration = parseInt(rec.getValue('u_duration_minutes'));
	}
	

	//Load data for new Page
	if (data.page == 'sc_cat_item') {
		// If this is normal snow scripting
		var topicDetail = util.getTopicDetail(data.catItem); 
		var listTypes = util.getListType(topicDetail);
		var list = util.getQBByTopic(topicDetail,listTypes);
		data.items = list;
	}

	//Load data for Ticket Page
	if (data.page == 'ticket' || data.page == 'form') {
		var dataJSON = new GlideRecord(data.table);
		if (dataJSON.get(data.catItem)) {
			data.items = JSON.parse(dataJSON.variables.dataload);
		}
	}

	//Pagination
	data.limit = 1;
	data.totalPages = 0;
	data.totalQuestions = data.items.length;
	data.pages = [];
	data.temp = 0;

	data.totalPages = Math.ceil(data.totalQuestions/data.limit);
	for(var i = 0; i < data.totalPages; i++) {
		data.pages.push(i+1);
	}


	data.catalogItemWidget = $sp.getWidget("snow_countdown_timer");
	
	

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>TDO55</sys_created_by>
        <sys_created_on>2021-05-05 04:36:11</sys_created_on>
        <sys_id>dcca7ba7db7fe010b6429db2ca96196f</sys_id>
        <sys_mod_count>364</sys_mod_count>
        <sys_name>Snow Exam Loader</sys_name>
        <sys_package display_value="Snow Exam" source="x_292088_snow_exam">5dda0835dbbf2010b6429db2ca961999</sys_package>
        <sys_policy/>
        <sys_scope display_value="Snow Exam">5dda0835dbbf2010b6429db2ca961999</sys_scope>
        <sys_update_name>sp_widget_dcca7ba7db7fe010b6429db2ca96196f</sys_update_name>
        <sys_updated_by>HLE219</sys_updated_by>
        <sys_updated_on>2023-06-19 17:59:41</sys_updated_on>
        <template><![CDATA[<div class="center" ng-click="c.onPrompt()" ng-if="!c.isBegun">
  ${Begin}
</div>

<div ng-if="c.isBegun" class="test-wrapper">
  <div ng-if="!c.isTicketPage" class="test-timer">
    <sp-widget widget="data.catalogItemWidget"></sp-widget>
  </div>
  <div class="test-body"
       ng-repeat="question in c.data.items" 
       ng-if="$index <= c.indexEnd && $index >= c.indexStart">
    <div class="test-question">
      {{$index+1}}. <span ng-bind-html="question.question"></span>
    </div>

    <div class="test-answer-wrapper">
      <ul class="row test-options">
        <li ng-repeat="key in question.keys"
            ng-if="!key.empty"
            ng-click="selectKey($event,key,question)"
            class="col-float-left element-{{key.isSected}}">
          <i ng-if="c.isTicketPage && data.isAdmin"
             ng-class="checkCorrectAnswer(key,question)"></i>
          {{key.label}}
        </li>
      </ul>
    </div>
  </div>

  <div class="pagination">
    <div class="text-center">
      <a href="javascript:void(0)"
         ng-click="goToPage(number)"
         ng-repeat="number in data.pages"
         ng-class="c.currentPage == number ? 'active' : '' " >{{number}}</a>
      <a href="javascript:void(0)" ng-click="goToPage('end')">&raquo;</a>
    </div>
  </div>
  <div>
     <button id="btn-button" ng-if="c.currentPage > 1" href="javascript:void(0)" ng-click="goPreviousPage('previous')">Previous</button>
     <button id="btn-button" ng-if= "c.currentPage < c.data.items.length" href="javascript:void(0)" ng-click="goNextPage('next')">Next</button>
    </div>
</div>

]]></template>
    </sp_widget>
</record_update>
